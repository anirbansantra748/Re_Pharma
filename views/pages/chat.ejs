<% layout("/layouts/boilerplate") %>

<style>
	:root {
		--primCol: rgb(210, 231, 229);
		--bgCol: rgb(151, 189, 210);
		--SecCol: #57b3cd;
		--terCol: #54978b;
		--quadCol: #7de8d5;
	}

	body {
		background-color: var(--bgCol);
	}

	.chat-header {
		background: var(--SecCol);
		color: white;
		padding: 15px;
		text-align: center;
		font-size: 18px;
		font-weight: bold;
	}
	.chat-container {
		width: 80vw;
		height: 600px;
		background: var(--bgCol);
		border-radius: 10px;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
		display: flex;
		flex-direction: column;
		overflow: hidden;
		position: relative;
		left: 35px;
	}

	#chat-box {
		flex: 1;
		padding: 10px;
		overflow-y: auto;
		display: flex;
		flex-direction: column;
		gap: 8px;
		background: var(--primCol);
	}

	.message {
		padding: 8px 12px;
		border-radius: 8px;
		max-width: 70%;
		word-wrap: break-word;
	}
	.user-message {
		align-self: flex-end;
		background: var(--quadCol);
	}
	.ai-message {
		align-self: flex-start;
		background: var(--SecCol);
		color: white;
	}
	.chat-input {
		display: flex;
		border-top: 1px solid #ccc;
		padding: 10px;
		background: #f8f9fa;
	}
	#message-input {
		flex: 1;
		padding: 8px;
		border: none;
		border-radius: 5px;
		outline: none;
	}
	#send-button {
		background: var(--SecCol);
		color: white;
		border: none;
		padding: 8px 15px;
		margin-left: 8px;
		border-radius: 5px;
		cursor: pointer;
	}
	/* Features container */
	.features-container {
		display: flex;
		justify-content: space-around;
		gap: 15px;
		margin-bottom: 20px;
	}

	/* Individual feature card */
	.feature-card {
		background: #ffffff;
		padding: 15px;
		border-radius: 8px;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
		text-align: center;
		width: 250px;
		transition: transform 0.2s ease-in-out;
	}
	.feature-card:hover {
		transform: translateY(-5px);
		box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
	}

	.features-wrapper {
		background: #f0f8ff; /* Light blue background */
		padding: 20px;
		border-radius: 10px;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
		margin: 20px auto;
		width: 80vw;
	}
</style>

<!-- Features Section Wrapper -->
<div class="features-wrapper">
	<div class="features-container">
		<div class="feature-card">
			<h3>Medical Queries</h3>
			<p>Ask health-related questions and get AI-powered answers.</p>
		</div>
		<div class="feature-card">
			<h3>AI Consultations</h3>
			<p>Consulting AI for medical queries.</p>
		</div>
		<div class="feature-card">
			<h3>Symptom Checker</h3>
			<p>Enter your symptoms and get possible diagnoses.</p>
		</div>
		<div class="feature-card">
			<h3>Health Tips</h3>
			<p>Receive daily health and wellness tips.</p>
		</div>
	</div>
</div>

<div class="chat-container">
	<div class="chat-header">ChatBuddy</div>
	<div id="chat-box"></div>
	<div class="chat-input">
		<input
			type="text"
			id="message-input"
			name="message"
			placeholder="Type your message..."
			required />
		<button id="send-button">Send</button>
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const chatBox = document.getElementById("chat-box");
		const messageInput = document.getElementById("message-input");
		const sendButton = document.getElementById("send-button");
		const chatContainer = document.querySelector(".chat-container");

		const maxChatHeight = 800; // Set max height to prevent infinite expansion
		const baseHeight = 600; // Initial height of chat-box
		const increment = 30; // Increase height per message

		function sendMessage() {
			const message = messageInput.value.trim();
			if (!message) return;

			appendMessage("You", message, "user-message");
			messageInput.value = "";

			fetch("/ai/chat", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ message }),
			})
				.then((response) => response.json())
				.then((data) => {
					appendMessage(
						"AI",
						data.response || "No response received.",
						"ai-message"
					);
				})
				.catch(() => {
					appendMessage("AI", "Error contacting AI.", "ai-message");
				});
		}

		function appendMessage(sender, text, className) {
			const messageDiv = document.createElement("div");
			messageDiv.classList.add("message", className);
			messageDiv.innerHTML = `<strong>${sender}:</strong> ${text}`;
			chatBox.appendChild(messageDiv);
			chatBox.scrollTop = chatBox.scrollHeight;

			// Adjust chat-box height
			let newHeight = baseHeight + chatBox.children.length * increment;
			if (newHeight <= maxChatHeight) {
				chatContainer.style.height = newHeight + "px";
			}
		}

		sendButton.addEventListener("click", sendMessage);

		messageInput.addEventListener("keypress", (event) => {
			if (event.key === "Enter") {
				event.preventDefault();
				sendMessage();
			}
		});
	});
</script>
